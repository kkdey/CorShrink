cor_sample_boot <- cor(data_boot, use = "pairwise.complete.obs")
cor_table_boot <- reshape2::melt(cor_sample_boot);
cor_table_non_diag_boot <- cor_table_boot[which(cor_table_boot[,1] != cor_table_boot[,2]),];
cor_table_non_diag_boot.val <- cor_table_non_diag_boot[,3];
cor_table_non_diag_boot.val[which(cor_table_non_diag_boot.val>= thresh_up)] = thresh_up
cor_table_non_diag_boot.val[which(cor_table_non_diag_boot.val<= thresh_down)] = thresh_down
cor_transform_mean_vec_boot=0.5*log((1+cor_table_non_diag_boot.val)/(1-cor_table_non_diag_boot.val))
boot_mat[num, ] <- cor_transform_mean_vec_boot
cat("Finished Bootstrap :", num, "\n")
}
boot_num[1:5,1:5]
boot_mat[1:5,1:5]
sd_boot <- apply(boot_mat, 2, function(x) return(sd(x, na.rm=TRUE)))
sd_boot
boot_mat[,981]
dt <- cbind.data.frame(cor_table_non_diag_boot[,1:2], sd_boot)
dt[1:5,]
dcast(dt, Var1 ~ Var2)
library(reshape2)
reshape2::dcast(dt, Var1 ~ Var2)
source('~/Documents/CorShrink/R/bootcorSE_calc.R')
bootSDmat <- bootcorSE_calc(data)
sd_boot <- apply(boot_mat, 2, function(x) return(sd(x, na.rm=TRUE)))
dt <- cbind.data.frame(cor_table_non_diag_boot[,1:2], sd_boot)
sd_boot_mat <- reshape2::dcast(dt, Var1 ~ Var2)
diag(sd_boot_mat) <- 1
sd_boot_mat[which(is.na(sd_boot_mat))] <- 100
class(sd_boot_mat)
which(is.na(sd_boot_mat))
sd_boot_mat <- as.matrix(reshape2::dcast(dt, Var1 ~ Var2))
sd_boot_mat <- reshape2::dcast(dt, Var1 ~ Var2)
boot_mat <- matrix(0, nboot, dim(data)[2]*(dim(data)[2]-1))
for(num in 1:nboot){
boot_indices <- sample(1:dim(data)[1], dim(data)[1], replace = TRUE)
data_boot <- data[boot_indices,]
cor_sample_boot <- cor(data_boot, use = "pairwise.complete.obs")
cor_table_boot <- reshape2::melt(cor_sample_boot);
cor_table_non_diag_boot <- cor_table_boot[which(cor_table_boot[,1] != cor_table_boot[,2]),];
cor_table_non_diag_boot.val <- cor_table_non_diag_boot[,3];
cor_table_non_diag_boot.val[which(cor_table_non_diag_boot.val>= thresh_up)] = thresh_up
cor_table_non_diag_boot.val[which(cor_table_non_diag_boot.val<= thresh_down)] = thresh_down
cor_transform_mean_vec_boot=0.5*log((1+cor_table_non_diag_boot.val)/(1-cor_table_non_diag_boot.val))
boot_mat[num, ] <- cor_transform_mean_vec_boot
cat("Finished Bootstrap :", num, "\n")
}
sd_boot <- apply(boot_mat, 2, function(x) return(sd(x, na.rm=TRUE)))
dt <- cbind.data.frame(cor_table_non_diag_boot[,1:2], sd_boot)
sd_boot_mat <- reshape2::dcast(dt, Var1 ~ Var2)
sd_boot_mat[1:5, 1:5]
dim(sd_boot_mat)
temp <- reshape2::dcast(dt, Var1 ~ Var2)
sd_boot_mat <- temp[,-1]
rownames(sd_boot_mat)  <- temp[,1]
sd_boot_mat[1:3,1:3]
diag(sd_boot_mat) <- 1
sd_boot_mat[which(is.na(sd_boot_mat))] <- 100
sd_boot_mat[1:3,1:3]
which(is.na(sd_boot_mat))
sd_boot_mat[is.na(sd_boot_mat)] <- 100
sd_boot_mat
source('~/Documents/CorShrink/R/bootcorSE_calc.R')
data <- get(load(file = "../data/sample_by_feature_data.rda"))
bootSDmat <- bootcorSE_calc(data)
dim(bootSDmat)
out <- CorShrinkData(data, sd_boot = TRUE)
cormat <- cor(data, use = "pairwise.complete.obs")
out <- CorShrinkMatrix(cormat, zscore_sd = zscoreSDmat)
zscoreSDmat <- bootcorSE_calc(data)
out <- CorShrinkMatrix(cormat, zscore_sd = zscoreSDmat)
source('~/Documents/CorShrink/R/CorShrinkMatrix.R')
out <- CorShrinkMatrix(cormat, zscore_sd = zscoreSDmat)
image.control.default <- list(x.las = 2,
x.cex = 0.7,
y.las = 2,
y.cex = 0.7,
main1 = "sample corr matrix",
main2 = "CorShrink matrix",
cex.main = 1,
col=c(rev(rgb(seq(1,0,length=1000),1,seq(1,0,length=1000))),
rgb(1,seq(1,0,length=1000),seq(1,0,length=1000))))
image.control <- modifyList(image.control.default, image.control)
if(is.null(zscore_sd) && is.null(nsamp)){
stop("User must provide wither an nsamp or a zscore_sd arguments")
}
cormat[is.na(cormat)] = 0
if(!is.null(zscore_sd)){
zscore_sd[is.na(zscore_sd)] = 0
}
if(!is.null(nsamp)){
nsamp[is.na(nsamp)] <- 0
}
##############  Set control parameters for adaptive shrinkage  ################
ash.control.default = list(pointmass = TRUE, prior = "nullbiased", gridmult = 2,
mixcompdist = "normal", nullweight = 10,
outputlevel = 2, fixg = FALSE)
ash.control <- modifyList(ash.control.default, ash.control)
##################   vectorise the correlation matrix  ###################
cor_table <- reshape2::melt(cormat);
cor_table_non_diag <- cor_table[which(cor_table[,1] != cor_table[,2]),];
##################  thresholding very low or very high correlations ##########
cor_table_non_diag.val <- cor_table_non_diag[,3];
cor_table_non_diag.val[which(cor_table_non_diag.val >= thresh_up)]= thresh_up;
cor_table_non_diag.val[which(cor_table_non_diag.val <= thresh_down)]= thresh_down;
##################  Compute Fisher z-transform  ###########################
cor_transform_mean_vec=0.5*log((1+cor_table_non_diag.val)/(1-cor_table_non_diag.val))
################ Compute standard errors of Fisher z-transform  ############
cor_transform_sd_mat <- reshape2::melt(zscore_sd)
zscore_sd
zscore_sd <- zscoreSDmat
zscore_sd
cor_transform_sd_mat <- reshape2::melt(zscore_sd)
cor_transform_sd_mat
as.matrix(zscore_sd)
rownames(zscore_sd) <- NULL
colnames(zscore_sd) <- NULL
cor_transform_sd_mat <- reshape2::melt(zscore_sd)
cor_transform_sd_mat
rownames(zscore_sd) <- NULL
colnames(zscore_sd) <- NULL
zscore_sd
dim(zscore_sd)
cormat[1:5,1:5]
zscore_sd <- zscoreSDmat
cor_transform_sd_mat <- reshape2::melt(zscore_sd)
dim(zscore_sd)
zscore_sd[1:5,1:5]
cor_transform_sd_mat <- reshape2::melt(zscore_sd)
cor_transform_sd_mat[1:5,]
rownames(zscore_sd)
colnames(zscore_sd)
colnames(cormat)
rownames(cormat)
cor_table <- reshape2::melt(cormat);
cor_tabl1[1:5,]
cor_table[1:5,]
zscore_sd[1:4,1:4]
cormat[1:4,1:4]
class(cormat)
class(zscore_sd)
cor_transform_sd_mat <- reshape2::melt(as.matrix(zscore_sd))
cor_transform_sd_mat[1:5,]
cor_transform_sd_non_diag <- cor_transform_sd_mat[which(cor_transform_sd_mat[,1] != cor_transform_sd_mat[,2]),];
cor_transform_sd_vec <- cor_transform_sd_non_diag[,3]
index_zeros <- which(cor_transform_sd_vec  == 0)
cor_transform_sd_vec[index_zeros] <- 10^8
options(warn=-1)
##################   Adaptive Shrinkage (Fisher Z scores) ################
fit=do.call(ashr::ash, append(list(betahat = cor_transform_mean_vec,
sebetahat = cor_transform_sd_vec,
optmethod = optmethod),
ash.control))
ash.control.default = list(pointmass = TRUE, prior = "nullbiased", gridmult = 2,
mixcompdist = "normal", nullweight = 10,
outputlevel = 2, fixg = FALSE)
ash.control <- list()
ash.control <- modifyList(ash.control.default, ash.control)
fit=do.call(ashr::ash, append(list(betahat = cor_transform_mean_vec,
sebetahat = cor_transform_sd_vec,
optmethod = optmethod),
ash.control))
ash_cor_vec=(exp(2*fit$result$PosteriorMean)-1)/(exp(2*fit$result$PosteriorMean)+1);
newdata.table <- cor_table_non_diag;
newdata.table[,3] <- ash_cor_vec;
ash_cor_only <- reshape2::dcast(newdata.table, Var1~Var2, value.var = "value")[,-1];
ash_cor_only[is.na(ash_cor_only)]=1;
###############  Positive definite matrix completion of corShrink #############
pd_completion <- Matrix::nearPD(as.matrix(ash_cor_only), conv.tol=tol);
ash_cor_PD <- sweep(pd_completion$mat,diag(as.matrix(pd_completion$mat)), MARGIN=1,"/")
if(image) {
if(is.null(rownames(cor_mat))){
rownames(cor_mat) <- 1:dim(cor_mat)[1]
}
if(is.null(colnames(cor_mat))){
colnames(cor_mat) <- 1:dim(cor_mat)[2]
}
rownames(ash_cor_only) <- rownames(cor_mat)
colnames(ash_cor_only) <- colnames(cor_mat)
row_labs <- rownames(cor_mat)
col_labs <- colnames(cor_mat)
image(as.matrix(cor_mat), col=image.control$col, main = image.control$main1,
cex.main=image.control$cex.main, xaxt = "n", yaxt = "n", zlim=c(-1,1))
axis(1, at = seq(0, 1, length.out = ncol(cor_mat)),
labels = row_labs, las=image.control$x.las, cex.axis = image.control$x.cex)
axis(2, at = seq(0, 1, length.out = ncol(cor_mat)),
labels = col_labs, las=image.control$y.las, cex.axis = image.control$y.cex)
image(as.matrix(ash_cor_only), col=image.control$col, main=image.control$main2,
cex.main=image.control$cex.main, xaxt = "n", yaxt = "n", zlim=c(-1,1))
axis(1, at = seq(0, 1, length.out = ncol(cor_mat)),
labels = row_labs, las=image.control$x.las, cex.axis = image.control$x.cex)
axis(2, at = seq(0, 1, length.out = ncol(cor_mat)),
labels = col_labs, las=image.control$y.las, cex.axis = image.control$y.cex)
}
if(all.equal(target=ash_cor_only, current=ash_cor_PD, tolerance=tol)==TRUE){
cat("ash cor only and ash cor PD matrices are same")
}else{
cat("ash cor only and ash cor PD matrices are different")
}
source('~/Documents/CorShrink/R/CorShrinkMatrix.R')
out <- CorShrinkMatrix(cormat, zscore_sd = zscoreSDmat)
out
out <- CorShrinkData(data, sd_boot = TRUE)
dim(out$ash_cor_only)
dim(out$ash_cor_PD)
out$ash_cor_only[1:5,1:5]
out$ash_cor_PD[1:5,1:5]
source('~/Documents/CorShrink/R/CorShrinkMatrix.R')
out <- CorShrinkMatrix(cormat, zscore_sd = zscoreSDmat)
out$ash_cor_PD[1:5,1:5]
out$ash_cor_only[1:5,1:5]
source('~/Documents/CorShrink/R/CorShrinkMatrix.R')
out <- CorShrinkMatrix(cormat, zscore_sd = zscoreSDmat)
out$ash_cor_only[1:5,1:5]
source('~/Documents/CorShrink/R/CorShrinkMatrix.R')
out <- CorShrinkMatrix(cormat, zscore_sd = zscoreSDmat)
out$ash_cor_only
out$ash_cor_only[1:4,1:4]
out$ash_cor_PD[1:5,1:5]
devtools::document()
library(CorShrink)
library(CorShrink)
devtools::document()
data <- get(load(system.file("extdata", "sample_by_feature_data.rda",
package = "CorShrink")))
dim(data)
data[1:5,1:5]
data[1:5,1:5]
out <- CorShrinkData(data, image = TRUE, optmethod = "mixEM")
out <- CorShrinkData(data, image = TRUE, optmethod = "mixEM")
source('~/Documents/CorShrink/R/CorShrinkMatrix.R')
devtools::document()
library(CorShrink)
par(mfrow=c(1,2))
out <- CorShrinkData(data, image = TRUE, optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.7))
source('~/Documents/CorShrink/R/CorShrinkMatrix.R')
devtools::document()
library(CorShrink)
source('~/Documents/CorShrink/R/CorShrinkMatrix.R')
cor_vec <- c(-0.56, -0.4, 0.02, 0.2, 0.9, 0.8, 0.3, 0.1, 0.4)
nsamp_vec <- c(10, 20, 30, 4, 50, 20, 20, 10, 3)
out <- CorShrinkVector(corvec = cor_vec, nsamp_vec = nsamp_vec,
optmethod = "mixVBEM")
out
devtools::document()
library(CorShrink)
ash.workhorse()
ash.workhorse
??ash.workhorse
par(mfrow=c(2,2))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mode = "est"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
devtools::document()
library(CorShrink)
par(mfrow=c(2,2))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mode = "est"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
par(mfrow=c(2,2))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mode = "estimate"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
par(mfrow=c(3,2))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "normal"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mode = "uniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
par(mfrow=c(3,2))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "normal"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "uniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "halfuniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
par(mfrow=c(3,2))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "normal"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "uniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "halfuniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "+uniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
par(mfrow=c(4,2))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "normal"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "uniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "halfuniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image = TRUE, optmethod = "mixEM",
ash.control = list(mixcompdist = "+uniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
source('~/Documents/CorShrink/R/CorShrinkVector.R')
source('~/Documents/CorShrink/R/CorShrinkMatrix.R')
devtools::document()
library(CorShrink)
devtools::document()
library(CorShrink)
devtools::document()
library(CorShrink)
devtools::document()
library(CorShrink)
par(mfrow=c(2,2))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.3))
devtools::document()
library(CorShrink)
par(mfrow=c(2,2))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.3))
source('~/Documents/CorShrink/R/CorShrinkData.R')
par(mfrow=c(2,2))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.3))
source('~/Documents/CorShrink/R/CorShrinkMatrix.R')
par(mfrow=c(2,2))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
ash.control = list(mode = "estimate"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
par(mfrow=c(2,2))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
ash.control = list(mixcompdist = "normal"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
ash.control = list(mixcompdist = "uniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
ash.control = list(mixcompdist = "halfuniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
ash.control = list(mixcompdist = "+uniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
source('~/Documents/CorShrink/R/CorShrinkMatrix.R')
par(mfrow=c(2,2))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
ash.control = list(mixcompdist = "normal"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
ash.control = list(mixcompdist = "uniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
ash.control = list(mixcompdist = "halfuniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
ash.control = list(mixcompdist = "+uniform"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
par(mfrow=c(1,2))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.3))
out <- CorShrinkData(data, sd_boot = FALSE, image_corshrink = TRUE,
optmethod = "mixEM",
ash.control = list(mode = "estimate"),
image.control = list(x.cex = 0.3, y.cex = 0.3))
devtools::document()
library(CorShrink)
rm(list=ls())
devtools::document()
library(CorShrink)
library(CorShrink)
devtools::document()
library(CorShrink)
library(CorShrink)
devtools::document()
devtools::document()
library(CorShrink)
library(CorShrink)
devtools::document()
install.packages("covr")
devtools::document()
library(CorShrink)
data <- get(load(system.file("extdata", "sample_by_feature_data.rda",
package = "CorShrink")))
par(mfrow=c(1,2))
out <- CorShrinkData(data, sd_boot = FALSE, image_original = TRUE,
image_corshrink = TRUE, optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.3))
image.control = list(x.cex = 0.3, y.cex = 0.3))
par(mfrow=c(1,2))
out <- CorShrinkData(data, sd_boot = FALSE, image_original = TRUE,
image_corshrink = TRUE, optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.3))
par(mfrow=c(1,2))
out <- CorShrinkData(data, sd_boot = TRUE, image_original = TRUE,
image_corshrink = TRUE, optmethod = "mixEM",
par(mfrow=c(1,2))
out <- CorShrinkData(data, sd_boot = TRUE, image_original = TRUE,
image_corshrink = TRUE, optmethod = "mixEM",
image.control = list(x.cex = 0.3, y.cex = 0.3))
devtools::document()
library(CorShrink)
library("workflowr")
install.packages("workflowr")
devtools::install_github("jdblischak/workflowr")
library("workflowr")
wflow_start("../CorShrink-pages")
wflow_build()
ash
?ash
??ash
devtools::document()
library(CorShrink)
cormat <- get(load(system.file("extdata", "corr_matrix.rda",
package = "CorShrink")))
nsamp <- get(load(system.file("extdata", "common_samples.rda",
package = "CorShrink")))
out <- CorShrinkMatrix(cormat, nsamp, image_corshrink  = TRUE, optmethod = "mixEM",)
out <- CorShrinkMatrix(cormat, nsamp, image_corshrink  = TRUE, optmethod = "mixEM", ash.control = list(pointmass = TRUE,
mixcompdist = "normal", nullweight = 10,
fixg = FALSE, mode = 0,
prior = "nullbiased", gridmult = sqrt(2),
outputlevel = 2, alpha = 0,
df = NULL))
out
out <- CorShrinkMatrix(cormat, nsamp, image_corshrink  = TRUE, optmethod = "mixEM", ash.control = list(pointmass = TRUE,
mixcompdist = "normal", nullweight = 10,
fixg = FALSE, mode = 0,
prior = "nullbiased", gridmult = sqrt(2),
outputlevel = 2, alpha = 0,
df = NULL, pi_thresh= 1e-10))
devtools::document()
library(CorShrink)
??ash
??ash.workhorse
devtools::document()
library(CorShrink)
rm(list=ls())
source('~/Documents/CorShrink/R/CorShrinkVector.R')
cor_vec <- c(-0.56, -0.4, 0.02, 0.2, 0.9, 0.8, 0.3, 0.1, 0.4)
#'  nsamp_vec <- c(10, 20, 30, 4, 50, 60, 20, 10, 3)
#'  out <- CorShrinkVector(corvec = cor_vec, nsamp_vec = nsamp_vec,
#'                         optmethod = "mixEM")
#'
cor_vec <- c(-0.56, -0.4, 0.02, 0.2, 0.9, 0.8, 0.3, 0.1, 0.4)
nsamp_vec <- c(10, 20, 30, 4, 50, 60, 20, 10, 3)
out <- CorShrinkVector(corvec = cor_vec, nsamp_vec = nsamp_vec,
#'                         optmethod = "mixEM")
out <- CorShrinkVector(corvec = cor_vec, nsamp_vec = nsamp_vec,optmethod = "mixEM")
out
@importFrom utils modifyList
remove.packages("ashr")
??as.hclust
install.packages("ashr")
cor_vec <- c(-0.56, -0.4, 0.02, 0.2, 0.9, 0.8, 0.3, 0.1, 0.4)
#'  nsamp_vec <- c(10, 20, 30, 4, 50, 60, 20, 10, 3)
#'  out <- CorShrinkVector(corvec = cor_vec, nsamp_vec = nsamp_vec,
#'                         optmethod = "mixEM",
#'                         ash.control = list(pointmass = TRUE,
#'                         mixcompdist = "normal", nullweight = 10,
#'                         fixg = FALSE, mode = 0, prior = "nullbiased",
#'                         gridmult = sqrt(2), outputlevel = 2, alpha = 0,
#'                         df = NULL, pi_thresh = 1e-10))
cor_vec <- c(-0.56, -0.4, 0.02, 0.2, 0.9, 0.8, 0.3, 0.1, 0.4)
nsamp_vec <- c(10, 20, 30, 4, 50, 60, 20, 10, 3)
out <- CorShrinkVector(corvec = cor_vec, nsamp_vec = nsamp_vec)
out
ashr::ash
ashr::ash.workhorse()
ashr::ash.workhorse
source('~/Documents/CorShrink/R/CorShrinkVector.R')
cor_vec <- c(-0.56, -0.4, 0.02, 0.2, 0.9, 0.8, 0.3, 0.1, 0.4)
nsamp_vec <- c(10, 20, 30, 4, 50, 60, 20, 10, 3)
out <- CorShrinkVector(corvec = cor_vec, nsamp_vec = nsamp_vec)
sessionInfo()
ash.workhorse
ash::ash.workhorse
ashr::ash.workhorse
remove.packages("ashr")
install.packages("ashr")
sessionInfo()
ashr::ash.workhorse
ashr::ash.workhorse
devtools::document()
library(CorShrink)
devtools::document()
library(CorShrink)
citation("CorShrink")
install.packages("CorShrink")
